blueprint:
  name: Sunrise Alarm
  description: >
    A gradual sunrise alarm that slowly brightens lights and warms color temperature
    to simulate a natural sunrise. Supports workday sensors and customizable timing.
  domain: automation
  input:
    alarm_time:
      name: Alarm Time
      description: Time when the alarm should reach full brightness
      selector:
        time:
    
    target_lights:
      name: Target Lights
      description: Lights or light groups to control for the sunrise effect
      selector:
        target:
          entity:
            - domain: light
    
    fade_duration:
      name: Fade Duration (minutes)
      description: How long before the alarm time to start fading in the lights
      default: 30
      selector:
        number:
          min: 5
          max: 120
          step: 5
          unit_of_measurement: "minutes"
    
    workday_sensor:
      name: Workday Sensor (Optional)
      description: If specified, alarm will only trigger on workdays
      default: {}
      selector:
        entity:
          domain: binary_sensor
    
    min_brightness:
      name: Minimum Brightness
      description: Starting brightness percentage for the fade
      default: 1
      selector:
        number:
          min: 1
          max: 50
          step: 1
          unit_of_measurement: "%"
    
    max_brightness:
      name: Maximum Brightness
      description: Final brightness percentage at alarm time
      default: 100
      selector:
        number:
          min: 50
          max: 100
          step: 1
          unit_of_measurement: "%"
    
    min_color_temp:
      name: Minimum Color Temperature
      description: Warm color temperature at start (lower = warmer)
      default: 2000
      selector:
        number:
          min: 1000
          max: 4000
          step: 100
          unit_of_measurement: "K"
    
    max_color_temp:
      name: Maximum Color Temperature
      description: Cool color temperature at end (higher = cooler)
      default: 4000
      selector:
        number:
          min: 3000
          max: 6500
          step: 100
          unit_of_measurement: "K"
    
    weekdays_only:
      name: Weekdays Only
      description: Only run alarm on weekdays (Monday-Friday)
      default: false
      selector:
        boolean:

variables:
  fade_minutes: !input fade_duration
  fade_seconds: "{{ fade_minutes * 60 }}"
  min_bright: !input min_brightness
  max_bright: !input max_brightness
  min_temp: !input min_color_temp
  max_temp: !input max_color_temp
  workday_entity: !input workday_sensor
  weekdays_enabled: !input weekdays_only

trigger:
  - platform: time
    at: !input alarm_time
    id: "alarm_time"
  - platform: template
    value_template: >
      {% set alarm_time = states('input_datetime.alarm_time') if 'input_datetime.alarm_time' in states else (trigger.now.strftime('%H:%M') if trigger is defined else now().strftime('%H:%M')) %}
      {% set fade_mins = fade_minutes %}
      {% set alarm_hour = alarm_time.split(':')[0] | int %}
      {% set alarm_minute = alarm_time.split(':')[1] | int %}
      {% set fade_start = (alarm_hour * 60 + alarm_minute - fade_mins) %}
      {% set fade_start_hour = (fade_start // 60) % 24 %}
      {% set fade_start_minute = fade_start % 60 %}
      {{ now().strftime('%H:%M') == '{:02d}:{:02d}'.format(fade_start_hour, fade_start_minute) }}
    id: "fade_start"

condition:
  - condition: or
    conditions:
      # If workday sensor is provided, check it
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ workday_entity != {} }}"
          - condition: state
            entity_id: !input workday_sensor
            state: 'on'
      # If weekdays only is enabled, check day of week
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ weekdays_enabled }}"
          - condition: time
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
      # If neither condition is set, always run
      - condition: template
        value_template: "{{ workday_entity == {} and not weekdays_enabled }}"

action:
  - choose:
      # Fade start trigger
      - conditions:
          - condition: trigger
            id: "fade_start"
        sequence:
          - service: light.turn_on
            target: !input target_lights
            data:
              brightness_pct: "{{ min_bright }}"
              color_temp: "{{ min_temp }}"
              transition: 1
          
          # Gradual fade over the specified duration
          - repeat:
              count: "{{ fade_minutes }}"
              sequence:
                - delay: "00:01:00"
                - variables:
                    progress: "{{ repeat.index / fade_minutes }}"
                    current_brightness: "{{ min_bright + (max_bright - min_bright) * progress }}"
                    current_temp: "{{ min_temp + (max_temp - min_temp) * progress }}"
                - service: light.turn_on
                  target: !input target_lights
                  data:
                    brightness_pct: "{{ current_brightness | round(0) }}"
                    color_temp: "{{ current_temp | round(0) }}"
                    transition: 60
      
      # Alarm time trigger (final state)
      - conditions:
          - condition: trigger
            id: "alarm_time"
        sequence:
          - service: light.turn_on
            target: !input target_lights
            data:
              brightness_pct: "{{ max_bright }}"
              color_temp: "{{ max_temp }}"
              transition: 60

mode: restart
