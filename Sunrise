blueprint:
  name: Sunrise Alarm
  description: >
    A gradual sunrise alarm that slowly brightens lights and warms color temperature
    to simulate a natural sunrise. Supports workday sensors and customizable timing.
  domain: automation
  input:
    alarm_time:
      name: Alarm Time
      description: Time when the alarm should reach full brightness
      selector:
        time:
    
    target_lights:
      name: Target Lights
      description: Lights or light groups to control for the sunrise effect
      selector:
        target:
          entity:
            - domain: light
    
    fade_duration:
      name: Fade Duration (minutes)
      description: How long before the alarm time to start fading in the lights
      default: 30
      selector:
        number:
          min: 5
          max: 120
          step: 5
          unit_of_measurement: "minutes"
    
    workday_sensor:
      name: Workday Sensor (Optional)
      description: If specified, alarm will only trigger on workdays
      default: {}
      selector:
        entity:
          domain: binary_sensor
    
    min_brightness:
      name: Minimum Brightness
      description: Starting brightness percentage for the fade
      default: 1
      selector:
        number:
          min: 1
          max: 50
          step: 1
          unit_of_measurement: "%"
    
    max_brightness:
      name: Maximum Brightness
      description: Final brightness percentage at alarm time
      default: 100
      selector:
        number:
          min: 50
          max: 100
          step: 1
          unit_of_measurement: "%"
    
    min_color_temp:
      name: Minimum Color Temperature
      description: Warm color temperature at start (lower = warmer)
      default: 2000
      selector:
        number:
          min: 1000
          max: 4000
          step: 100
          unit_of_measurement: "K"
    
    max_color_temp:
      name: Maximum Color Temperature
      description: Cool color temperature at end (higher = cooler)
      default: 4000
      selector:
        number:
          min: 3000
          max: 6500
          step: 100
          unit_of_measurement: "K"
    
    weekdays_only:
      name: Weekdays Only
      description: Only run alarm on weekdays (Monday-Friday)
      default: false
      selector:
        boolean:

variables:
  fade_duration_minutes: !input fade_duration
  min_bright: !input min_brightness
  max_bright: !input max_brightness
  min_temp: !input min_color_temp
  max_temp: !input max_color_temp
  workday_entity: !input workday_sensor
  weekdays_enabled: !input weekdays_only

trigger:
  - platform: time
    at: !input alarm_time
    id: "start_fade"

condition:
  - condition: or
    conditions:
      # If workday sensor is provided, check it
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ workday_entity != {} }}"
          - condition: state
            entity_id: !input workday_sensor
            state: 'on'
      # If weekdays only is enabled, check day of week
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ weekdays_enabled }}"
          - condition: time
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
      # If neither condition is set, always run
      - condition: template
        value_template: "{{ workday_entity == {} and not weekdays_enabled }}"

action:
  # Calculate fade start time (trigger time minus fade duration)
  - variables:
      fade_start_timestamp: >
        {% set trigger_time = trigger.now %}
        {% set fade_minutes_ago = trigger_time - timedelta(minutes=fade_duration_minutes) %}
        {{ fade_minutes_ago }}
      
  # Turn on lights at minimum settings to start
  - service: light.turn_on
    target: !input target_lights
    data:
      brightness_pct: "{{ min_bright }}"
      color_temp_kelvin: "{{ min_temp }}"
  
  # Wait until it's actually time to start the fade
  - delay:
      seconds: >
        {% set now_time = now() %}
        {% set fade_start = now_time - timedelta(minutes=fade_duration_minutes) %}
        {% if now_time < fade_start %}
          {{ (fade_start - now_time).total_seconds() }}
        {% else %}
          0
        {% endif %}
  
  # Perform the gradual fade with 30-second steps
  - repeat:
      count: "{{ (fade_duration_minutes * 2) | int }}"
      sequence:
        - variables:
            step_number: "{{ repeat.index }}"
            total_steps: "{{ (fade_duration_minutes * 2) | int }}"
            progress: "{{ step_number / total_steps }}"
            # Use quadratic curve for more natural progression
            smooth_progress: "{{ progress ** 2 }}"
            current_brightness: "{{ min_bright + (max_bright - min_bright) * smooth_progress }}"
            current_temp: "{{ min_temp + (max_temp - min_temp) * smooth_progress }}"
        
        - service: light.turn_on
          target: !input target_lights
          data:
            brightness_pct: "{{ current_brightness | round(1) }}"
            color_temp_kelvin: "{{ current_temp | round(0) }}"
        
        # Wait 30 seconds between steps (except on last step)
        - condition: template
          value_template: "{{ repeat.index < total_steps }}"
        - delay: "00:00:30"
  
  # Ensure final state is set correctly
  - service: light.turn_on
    target: !input target_lights
    data:
      brightness_pct: "{{ max_bright }}"
      color_temp_kelvin: "{{ max_temp }}"
      transition: 30

mode: single
